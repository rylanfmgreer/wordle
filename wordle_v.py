# -*- coding: utf-8 -*-
"""wordle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/168YVHkeno-6wXoa9cOSOoMKdKVpEL5cv

## 1. Get five letter words
"""

# REQUIRED PACKAGE: be sure to pip install
#!pip install english-words

import english_words
import numpy as np

"""## Set up list of words """
word_list = english_words.english_words_lower_alpha_set
word_length = 5
flw = set([word for word in word_list if 
           (len(word) == word_length) &
           (word[0] == word[0].lower()) for obj in word_list])
flw.remove('u.s.a') # the only word with punctuation?
n_words = len(flw)

"""## Vectorized calculation: build word matrix"""

# letter to index dictionary
l2n = {}
alphabet = 'abcdefghijklmnopqrstuvwxyz'
for i in range(len(alphabet)):
  l2n[alphabet[i]] = i

# function for building matrix representation of words
def word_to_vec(word):
  """
    Gives an appropriate vector representation of a word
    to be used in vectorized calculations
  """
  g = np.zeros( (len(word) + 2) * 26 ).astype(bool)
  for i in range(len(word)):
    base = i * 26
    add  = l2n[ word[i] ]
    g[ base + add ] = 1
    g[len(word) * 26 + add ] = 1
  g[-26:] = 1 - g[-52:-26]
  return g

flw_list = list(flw)
word_matrix = np.array( [word_to_vec(word).reshape(7, 26) for word in flw_list] )
word_matrix[0:1, :]

"""## Vectorized calculation: do calculations"""
m            = word_matrix.shape[0]
words_killed = 0 # avg number killed
best_word    = ''
scores       = {}

for i in range( m ):

  # 0 Word we are guessing; word and vectorized form
  base_word = flw_list[i]
  guess = word_matrix[i:(i + 1), :, :]

  # 1 If we guess base_word, what is the "info content" given
  #   every potential target word?
  #   1.1 set up matrix
  info_matrix = np.zeros( word_matrix.shape ).astype(bool)
  #   1.2 match known letters (position and inclusion)
  info_matrix[:, :6, :] = ( guess[:, :6, :] & word_matrix[:, :6, :] )

  #   1.3 find letters in the guess that are not present in the other word
  info_matrix[:, 6, :] =  np.logical_not(word_matrix[:, 5, :]) & guess[:, 5, :]

  # 2 find what words we have killed given any target word
  n_words = 0
  for j in range( 7, m ): 
    rem_words = np.zeros_like(info_matrix).astype(bool)

    # 2.1 info we would get if this was the target word:
    info_unit  = info_matrix[j:(j + 1), :, :]

    # 2.1.1 assure we don't have a true somewhere in the info's
    #       known letters, but a false in that word
    rem_words[:, :6, :] = np.logical_not(
          info_unit[:, :6, :] & np.logical_not( word_matrix[:, :6, :] )
          )
    
    # 2.1.2 assure we don't have a letter that we know is _not_ present given
    #       info, but which _is_ present in the target word
    rem_words[:, 6, :] = np.logical_not( info_unit[:, 6, :] & word_matrix[:, 5, :] )
    count = rem_words.min(axis=1).min(axis=1)
    count = np.logical_not( count )
    n_words += count.sum()


  n_words = n_words / m
  if n_words > words_killed:
    words_killed = n_words
    best_word = flw_list[i]
  scores[ base_word ] = n_words 
  
  print('base word: {a}; best word so far: {b}; words completed: {c}; words remaining: {d}, killed: {e}'.format(a=base_word, 
                                                                                                   b=best_word, 
                                                                                                   c=i,
                                                                                                   d=(len(flw_list) - i),
                                                                                                   e=n_words)
  )